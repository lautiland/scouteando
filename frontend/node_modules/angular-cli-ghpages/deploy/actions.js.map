{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../deploy/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yDAAmF;AAEnF,gDAAwB;AAKxB,SAA8B,MAAM,CAClC,MAMC,EACD,OAAuB,EACvB,WAAwB,EACxB,OAAe;;QAGf,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACpD;YAED,MAAM,SAAS,qBACV,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CACxD,CAAC;YAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;YAC/D,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,cAAc,CACxC,IAAA,kCAAsB,EAAC,WAAW,CAAC,IAAI,CAAC,kCAEnC,WAAW,CAAC,OAAO,GACnB,SAAS,EAEf,CAAC;YACF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC;YAEvC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;SACF;QAID,IAAI,GAAW,CAAC;QAChB,IAAI,OAAO,CAAC,GAAG,EAAE;YAEf,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;SAEnB;aAAM;YAEL,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,gBAAgB,CACjD,IAAA,kCAAsB,EAAC,WAAW,CAAC,IAAI,CAAC,CACzC,CAAC;YASF,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;gBAC5B,MAAM,IAAI,KAAK,CACb,6DAA6D,WAAW,CAAC,IAAI,oBAAoB,CAClG,CAAC;aACH;YAED,IAAI,OAAO,YAAY,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAC/C,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;aACrD;iBAAM;gBACL,MAAM,GAAG,GAAG,YAAY,CAAC,UAAiB,CAAC;gBAC3C,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,CAAA;aACvC;SACF;QAED,MAAM,MAAM,CAAC,GAAG,CACd,GAAG,EACH,OAAO,EACN,OAAO,CAAC,MAAuC,CACjD,CAAC;IACJ,CAAC;CAAA;AAhFD,yBAgFC","sourcesContent":["import { BuilderContext, targetFromTargetString } from '@angular-devkit/architect';\nimport { logging } from '@angular-devkit/core';\nimport path from 'path';\n\nimport { BuildTarget } from '../interfaces';\nimport { Schema } from './schema';\n\nexport default async function deploy(\n  engine: {\n    run: (\n      dir: string,\n      options: Schema,\n      logger: logging.LoggerApi\n    ) => Promise<void>;\n  },\n  context: BuilderContext,\n  buildTarget: BuildTarget,\n  options: Schema\n) {\n  // 1. BUILD\n  if (options.noBuild) {\n    context.logger.info(`ðŸ“¦ Skipping build`);\n  } else {\n    if (!context.target) {\n      throw new Error('Cannot execute the build target');\n    }\n\n    const overrides = {\n      ...(options.baseHref && { baseHref: options.baseHref })\n    };\n\n    context.logger.info(`ðŸ“¦ Building \"${context.target.project}\"`);\n    context.logger.info(`ðŸ“¦ Build target \"${buildTarget.name}\"`);\n\n    const build = await context.scheduleTarget(\n      targetFromTargetString(buildTarget.name),\n      {\n        ...buildTarget.options,\n        ...overrides\n      }\n    );\n    const buildResult = await build.result;\n\n    if (!buildResult.success) {\n      throw new Error('Error while building the app.');\n    }\n  }\n\n  // 2. DEPLOYMENT\n\n  let dir: string;\n  if (options.dir) {\n\n    dir = options.dir;\n\n  } else {\n\n    const buildOptions = await context.getTargetOptions(\n      targetFromTargetString(buildTarget.name)\n    );\n\n    // Output path configuration\n    // The outputPath option can be either\n    // - a String which will be used as the base value + default value 'browser'\n    // - or an Object for more fine-tune configuration.\n    // see https://angular.io/guide/workspace-config#output-path-configuration\n    // see https://github.com/angular/angular-cli/pull/26675\n\n    if (!buildOptions.outputPath) {\n      throw new Error(\n        `Cannot read the outputPath option of the Angular project '${buildTarget.name}' in angular.json.`\n      );\n    }\n\n    if (typeof buildOptions.outputPath === 'string') {\n      dir = path.join(buildOptions.outputPath, 'browser');\n    } else {\n      const obj = buildOptions.outputPath as any;\n      dir = path.join(obj.base, obj.browser)\n    }\n  }\n\n  await engine.run(\n    dir,\n    options,\n    (context.logger as unknown) as logging.LoggerApi\n  );\n}\n"]}