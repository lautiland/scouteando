{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAImC;AAEnC,yDAA2C;AAC3C,wDAA+B;AAS/B,kBAAe,IAAA,yBAAa,EAC1B,CAAO,OAAe,EAAE,OAAuB,EAA0B,EAAE;IACzE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACnE;IAED,MAAM,iBAAiB,GAAG;QACxB,IAAI,EACF,OAAO,CAAC,aAAa;YACrB,OAAO,CAAC,WAAW;YACnB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,mBAAmB;KAC/C,CAAC;IAEF,IAAI,oBAA6C,CAAC;IAClD,IAAI,OAAO,CAAC,SAAS,EAAE;QACrB,oBAAoB,GAAG;YACrB,IAAI,EACF,OAAO,CAAC,eAAe;gBACvB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,uBAAuB;SACnD,CAAC;KACH;IAUD,MAAM,gBAAgB,GAAG,oBAAoB;QAC3C,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAC,iBAAiB,CAAC;IAEtB,IAAI;QACF,MAAM,IAAA,iBAAM,EAAC,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;KAC1D;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QACnE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAChC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC3B;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC","sourcesContent":["import {\n  BuilderContext,\n  BuilderOutput,\n  createBuilder\n} from '@angular-devkit/architect';\n\nimport * as engine from '../engine/engine';\nimport deploy from './actions';\nimport { Schema } from './schema';\nimport { BuildTarget } from '../interfaces';\n\n// Call the createBuilder() function to create a builder. This mirrors\n// createJobHandler() but add typings specific to Architect Builders.\n//\n// if something breaks here, see how angularfire has fixed it:\n// https://github.com/angular/angularfire/blob/master/src/schematics/deploy/builder.ts\nexport default createBuilder(\n  async (options: Schema, context: BuilderContext): Promise<BuilderOutput> => {\n    if (!context.target) {\n      throw new Error('Cannot deploy the application without a target');\n    }\n\n    const staticBuildTarget = {\n      name:\n        options.browserTarget ||\n        options.buildTarget ||\n        `${context.target.project}:build:production`\n    };\n\n    let prerenderBuildTarget: BuildTarget | undefined;\n    if (options.prerender) {\n      prerenderBuildTarget = {\n        name:\n          options.prerenderTarget ||\n          `${context.target.project}:prerender:production`\n      };\n    }\n\n    // serverBuildTarget is not supported and is completely ignored\n    // let serverBuildTarget: BuildTarget | undefined;\n    // if (options.ssr) {\n    //   serverBuildTarget = {\n    //     name: options.serverTarget || options.universalBuildTarget || `${context.target.project}:server:production`\n    //   };\n    // }\n\n    const finalBuildTarget = prerenderBuildTarget\n      ? prerenderBuildTarget\n      : staticBuildTarget;\n\n    try {\n      await deploy(engine, context, finalBuildTarget, options);\n    } catch (e) {\n      context.logger.error('‚ùå An error occurred when trying to deploy:');\n      context.logger.error(e.message);\n      return { success: false };\n    }\n\n    return { success: true };\n  }\n);\n"]}