import { Injectable } from '@angular/core';
import { ContentService } from './content.service';
import { Router, NavigationEnd } from '@angular/router';
import { filter, pairwise } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class PreloadService {
  constructor(
    private contentService: ContentService,
    private router: Router
  ) {}

  /**
   * Precarga art√≠culos de todas las categor√≠as
   */
  preloadAllCategories(): void {
    this.contentService.getCategories().subscribe({
      next: (categories) => {
        categories.forEach(category => {
          this.contentService.preloadArticlesByCategory(category.slug);
        });
      },
      error: (error) => {
        console.error('Error precargando categor√≠as:', error);
      }
    });
  }

  /**
   * Precarga art√≠culos de una categor√≠a espec√≠fica
   */
  preloadCategoryArticles(categorySlug: string): void {
    console.log(`üì¶ PRECARGA: Precargando art√≠culos de "${categorySlug}"...`);
    this.contentService.preloadArticlesByCategory(categorySlug);
  }

  /**
   * Configura el seguimiento de navegaci√≥n para precargar contenido
   */
  setupNavigationTracking(): void {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd),
      pairwise()
    ).subscribe(([previousEvent, currentEvent]) => {
      const currentUrl = (currentEvent as NavigationEnd).url;
      
      // Si navega a una categor√≠a, precargar sus art√≠culos
      const categoryMatch = currentUrl.match(/\/([^\/]+)$/);
      if (categoryMatch && !currentUrl.includes('/article/')) {
        const categorySlug = categoryMatch[1];
        console.log(`üîó NAVEGACI√ìN: Detectada navegaci√≥n a categor√≠a "${categorySlug}"`);
        console.log(`ÔøΩ PRECARGA: Iniciando precarga de art√≠culos...`);
        this.preloadCategoryArticles(categorySlug);
      }
    });
  }

  /**
   * Precarga contenido inicial de la aplicaci√≥n
   */
  preloadInitialContent(): void {
    console.log('üì¶ PRECARGA: Obteniendo lista de categor√≠as...');
    
    // Precargar categor√≠as
    this.contentService.getCategories().subscribe({
      next: (categories) => {
        console.log(`‚úÖ PRECARGA: ${categories.length} categor√≠as disponibles`);
        
        // Precargar art√≠culos de la primera categor√≠a (m√°s probable de ser visitada)
        if (categories.length > 0) {
          const firstCategory = categories[0];
          console.log(`üì¶ PRECARGA: Iniciando precarga de categor√≠a principal "${firstCategory.name}"...`);
          this.preloadCategoryArticles(firstCategory.slug);
        }
      },
      error: (error) => {
        console.warn('‚ùå PRECARGA: Error obteniendo categor√≠as:', error);
      }
    });
  }

  /**
   * Limpia la cach√© de contenido
   */
  clearContentCache(): void {
    this.contentService.clearCache();
  }
}